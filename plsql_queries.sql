-- 1.
CREATE OR REPLACE PROCEDURE INCREASE_SALARY (
    P_EMP_ID NUMBER, 
    P_PERCENT NUMBER
) AS
BEGIN
    UPDATE EMPLOYEES
    SET SALARY = SALARY + (SALARY * P_PERCENT / 100)
    WHERE EMPLOYEE_ID = P_EMP_ID;
    
    COMMIT;
END;
/
BEGIN
    INCREASE_SALARY(101, 10);
END;
/


--2.Function: Calculate Bonus
CREATE OR REPLACE FUNCTION GET_BONUS(P_SALARY NUMBER) RETURN NUMBER AS
BEGIN
    RETURN P_SALARY * 0.10;
END;
/


SELECT EMPLOYEE_ID, FIRST_NAME, SALARY, GET_BONUS(SALARY) AS BONUS FROM EMPLOYEES;



--3This trigger prevents inserting an employee with a salary less than 3000.

CREATE OR REPLACE TRIGGER CHECK_MIN_SALARY
BEFORE INSERT OR UPDATE ON EMPLOYEES
FOR EACH ROW
DECLARE
    MIN_SAL NUMBER := 3000;
BEGIN
    IF :NEW.SALARY < MIN_SAL THEN
        RAISE_APPLICATION_ERROR(-20001, 'Salary too low!');
    END IF;
END;
/

INSERT INTO EMPLOYEES VALUES (103, 'David', 'Miller', 2500);


--4.This cursor retrieves and prints employee details.

DECLARE
    CURSOR EMP_CURSOR IS SELECT EMPLOYEE_ID, FIRST_NAME, SALARY FROM EMPLOYEES;
    V_ID EMPLOYEES.EMPLOYEE_ID%TYPE;
    V_NAME EMPLOYEES.FIRST_NAME%TYPE;
    V_SAL EMPLOYEES.SALARY%TYPE;
BEGIN
    OPEN EMP_CURSOR;
    LOOP
        FETCH EMP_CURSOR INTO V_ID, V_NAME, V_SAL;
        EXIT WHEN EMP_CURSOR%NOTFOUND;
        DBMS_OUTPUT.PUT_LINE('ID: ' || V_ID || ', Name: ' || V_NAME || ', Salary: ' || V_SAL);
    END LOOP;
    CLOSE EMP_CURSOR;
END;
/


--5.This procedure checks if an EMPLOYEE_ID exists before updating the salary.

CREATE OR REPLACE PROCEDURE SAFE_SALARY_UPDATE (
    P_EMP_ID NUMBER, 
    P_AMOUNT NUMBER
) AS
    V_COUNT NUMBER;
BEGIN
    SELECT COUNT(*) INTO V_COUNT FROM EMPLOYEES WHERE EMPLOYEE_ID = P_EMP_ID;
    
    IF V_COUNT = 0 THEN
        RAISE_APPLICATION_ERROR(-20002, 'Employee ID not found!');
    ELSE
        UPDATE EMPLOYEES SET SALARY = SALARY + P_AMOUNT WHERE EMPLOYEE_ID = P_EMP_ID;
        COMMIT;
    END IF;
END;
/


BEGIN
    SAFE_SALARY_UPDATE(202, 5000);
END;
/


--6.This PL/SQL block inserts an employee but rolls back the transaction (useful for testing).
BEGIN
    INSERT INTO EMPLOYEES VALUES (104, 'Sarah', 'Connor', 70000);
    
    -- Simulate an issue, rolling back
    ROLLBACK;
END;
/

SELECT * FROM EMPLOYEES WHERE EMPLOYEE_ID = 104;